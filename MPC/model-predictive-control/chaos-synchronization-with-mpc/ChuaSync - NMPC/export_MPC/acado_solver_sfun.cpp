/*
 *   acado_solver_sfun.cpp Simple C-MEX S-function for function call.
 *
 *   ABSTRACT:
 *     The purpose of this sfunction is to call a simple legacy
 *     function during simulation:
 *
 *        acado_step(acadoinput u1[1], acadooutput y1[1])
 *
 *   Simulink version           : 8.4 (R2014b) 08-Sep-2014
 *   C++ source code generated on : 05-Aug-2015 16:13:22

 * THIS S-FUNCTION IS GENERATED BY THE LEGACY CODE TOOL AND MAY NOT WORK IF MODIFIED

 */

/*
   %%%-MATLAB_Construction_Commands_Start
   def = legacy_code('initialize');
   def.SFunctionName = 'acado_solver_sfun';
   def.OutputFcnSpec = 'acado_step(acadoinput u1[1], acadooutput y1[1])';
   def.StartFcnSpec = 'acado_initialize( void )';
   def.TerminateFcnSpec = 'acado_cleanup( void )';
   def.HeaderFiles = {'acado_common.h', 'acado_solver_sfunction.h'};
   def.SourceFiles = {'acado_solver.c', 'acado_integrator.c', 'acado_auxiliary_functions.c', 'acado_solver_sfunction.c', 'acado_qpoases_interface.cpp', 'qpoases/SRC/QProblem.cpp', 'qpoases/SRC/QProblemB.cpp', 'qpoases/SRC/Bounds.cpp', 'qpoases/SRC/Constraints.cpp', 'qpoases/SRC/SubjectTo.cpp', 'qpoases/SRC/Indexlist.cpp', 'qpoases/SRC/CyclingManager.cpp', 'qpoases/SRC/Utils.cpp', 'qpoases/SRC/MessageHandling.cpp', 'qpoases/SRC/EXTRAS/SolutionAnalysis.cpp'};
   def.IncPaths = {'qpoases', 'qpoases/INCLUDE', 'qpoases/SRC'};
   def.Options.language = 'C++';
   legacy_code('sfcn_cmex_generate', def);
   legacy_code('compile', def);
   %%%-MATLAB_Construction_Commands_End
 */

/*
 * Must specify the S_FUNCTION_NAME as the name of the S-function.
 */
#define S_FUNCTION_NAME                acado_solver_sfun
#define S_FUNCTION_LEVEL               2

/*
 * Need to include simstruc.h for the definition of the SimStruct and
 * its associated macro definitions.
 */
#include "simstruc.h"

/* Ensure that this S-Function is compiled with a C++ compiler */
#ifndef __cplusplus
#error This S-Function must be compiled with a C++ compiler. Enter mex('-setup') in the MATLAB Command Window to configure a C++ compiler.
#endif

#include <string.h>
#include <stdlib.h>

/*
 * Specific header file(s) required by the legacy code function.
 */
#include "acado_common.h"
#include "acado_solver_sfunction.h"

/*
 * Code Generation Environment flag (simulation or standalone target).
 */
static int_T isSimulationTarget;

#define isDWorkNeeded(S)               ((!((ssRTWGenIsCodeGen(S) || ssGetSimMode(S)==SS_SIMMODE_EXTERNAL) && isSimulationTarget==0)) || ssIsRapidAcceleratorActive(S))

/*
 * Utility function prototypes.
 */
static void CheckDataTypes(SimStruct *S);
static int_T GetRTWEnvironmentMode(SimStruct *S);

/* Function: mdlInitializeSizes ===========================================
 * Abstract:
 *    The sizes information is used by Simulink to determine the S-function
 *    block's characteristics (number of inputs, outputs, states, etc.).
 */
static void mdlInitializeSizes(SimStruct *S)
{
  /*
   * Get the value returned by rtwenvironmentmode(modelName)
   */
  if (ssRTWGenIsCodeGen(S) || ssGetSimMode(S)==SS_SIMMODE_EXTERNAL) {
    isSimulationTarget = GetRTWEnvironmentMode(S);
    if (isSimulationTarget==-1) {
      ssSetErrorStatus(S,
                       "Unable to determine a valid code generation environment mode.");
      return;
    }

    isSimulationTarget |= ssRTWGenIsModelReferenceSimTarget(S);
  }

  /* Number of expected parameters */
  ssSetNumSFcnParams(S, 0);

  /*
   * Set the number of work vectors.
   */
  if (!isDWorkNeeded(S)) {
    ssSetNumPWork(S, 0);
    if (!ssSetNumDWork(S, 0))
      return;
  } else {
    ssSetNumPWork(S, 2);
    if (!ssSetNumDWork(S, 2))
      return;

    /*
     * Configure the dwork 0 (__dtSizeInfo)
     */
    ssSetDWorkDataType(S, 0, SS_INT32);
    ssSetDWorkUsageType(S, 0, SS_DWORK_USED_AS_DWORK);
    ssSetDWorkName(S, 0, "dtSizeInfo");
    ssSetDWorkWidth(S, 0, 5);
    ssSetDWorkComplexSignal(S, 0, COMPLEX_NO);

    /*
     * Configure the dwork 1 (__dtBusInfo)
     */
    ssSetDWorkDataType(S, 1, SS_INT32);
    ssSetDWorkUsageType(S, 1, SS_DWORK_USED_AS_DWORK);
    ssSetDWorkName(S, 1, "dtBusInfo");
    ssSetDWorkWidth(S, 1, 42);
    ssSetDWorkComplexSignal(S, 1, COMPLEX_NO);
  }

  /*
   * Set the number of input ports.
   */
  if (!ssSetNumInputPorts(S, 1))
    return;

  /*
   * Configure the input port 1
   */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "acadoinput", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID)
      return;
    ssSetInputPortDataType(S, 0, dataTypeIdReg);
  }

#endif

  ssSetBusInputAsStruct(S, 0, 1);
  ssSetInputPortWidth(S, 0, 1);
  ssSetInputPortComplexSignal(S, 0, COMPLEX_NO);
  ssSetInputPortDirectFeedThrough(S, 0, 1);
  ssSetInputPortAcceptExprInRTW(S, 0, 0);
  ssSetInputPortOverWritable(S, 0, 0);
  ssSetInputPortOptimOpts(S, 0, SS_REUSABLE_AND_LOCAL);
  ssSetInputPortRequiredContiguous(S, 0, 1);

  /*
   * Set the number of output ports.
   */
  if (!ssSetNumOutputPorts(S, 1))
    return;

  /*
   * Configure the output port 1
   */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "acadooutput", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID)
      return;
    ssSetOutputPortDataType(S, 0, dataTypeIdReg);
  }

#endif

  ssSetBusOutputObjectName(S, 0, (void *)"acadooutput");
  ssSetBusOutputAsStruct(S, 0, 1);
  ssSetOutputPortWidth(S, 0, 1);
  ssSetOutputPortComplexSignal(S, 0, COMPLEX_NO);
  ssSetOutputPortOptimOpts(S, 0, SS_REUSABLE_AND_LOCAL);
  ssSetOutputPortOutputExprInRTW(S, 0, 0);

  /*
   * Register reserved identifiers to avoid name conflict
   */
  if (ssRTWGenIsCodeGen(S) || ssGetSimMode(S)==SS_SIMMODE_EXTERNAL) {
    /*
     * Register reserved identifier for StartFcnSpec
     */
    ssRegMdlInfo(S, "acado_initialize", MDL_INFO_ID_RESERVED, 0, 0, ssGetPath(S));

    /*
     * Register reserved identifier for OutputFcnSpec
     */
    ssRegMdlInfo(S, "acado_step", MDL_INFO_ID_RESERVED, 0, 0, ssGetPath(S));

    /*
     * Register reserved identifier for TerminateFcnSpec
     */
    ssRegMdlInfo(S, "acado_cleanup", MDL_INFO_ID_RESERVED, 0, 0, ssGetPath(S));

    /*
     * Register reserved identifier for wrappers
     */
    if (isSimulationTarget) {
      /*
       * Register reserved identifier for allocating PWork for SimulationTarget
       */
      ssRegMdlInfo(S, "acado_solver_sfun_wrapper_allocmem", MDL_INFO_ID_RESERVED,
                   0, 0, ssGetPath(S));

      /*
       * Register reserved identifier for freeing PWork for SimulationTarget
       */
      ssRegMdlInfo(S, "acado_solver_sfun_wrapper_freemem", MDL_INFO_ID_RESERVED,
                   0, 0, ssGetPath(S));

      /*
       * Register reserved identifier for StartFcnSpec for SimulationTarget
       */
      ssRegMdlInfo(S, "acado_solver_sfun_wrapper_start", MDL_INFO_ID_RESERVED, 0,
                   0, ssGetPath(S));

      /*
       * Register reserved identifier for OutputFcnSpec for SimulationTarget
       */
      ssRegMdlInfo(S, "acado_solver_sfun_wrapper_output", MDL_INFO_ID_RESERVED,
                   0, 0, ssGetPath(S));

      /*
       * Register reserved identifier for TerminateFcnSpec for SimulationTarget
       */
      ssRegMdlInfo(S, "acado_solver_sfun_wrapper_terminate",
                   MDL_INFO_ID_RESERVED, 0, 0, ssGetPath(S));
    }
  }

  /*
   * This S-function can be used in referenced model simulating in normal mode.
   */
  ssSetModelReferenceNormalModeSupport(S, MDL_START_AND_MDL_PROCESS_PARAMS_OK);

  /*
   * Set the number of sample time.
   */
  ssSetNumSampleTimes(S, 1);

  /*
   * All options have the form SS_OPTION_<name> and are documented in
   * matlabroot/simulink/include/simstruc.h. The options should be
   * bitwise or'd together as in
   *   ssSetOptions(S, (SS_OPTION_name1 | SS_OPTION_name2))
   */
  ssSetOptions(S,
               SS_OPTION_USE_TLC_WITH_ACCELERATOR |
               SS_OPTION_CAN_BE_CALLED_CONDITIONALLY |
               SS_OPTION_EXCEPTION_FREE_CODE |
               SS_OPTION_WORKS_WITH_CODE_REUSE |
               SS_OPTION_SFUNCTION_INLINED_FOR_RTW |
               SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME);

#if defined(MATLAB_MEX_FILE)

  if ((ssGetSimMode(S)!=SS_SIMMODE_SIZES_CALL_ONLY) && !ssRTWGenIsCodeGen(S)) {
    /* Verify Data Type consistency with specification */
    CheckDataTypes(S);
  }

#endif

  ssSetSimulinkVersionGeneratedIn(S, "8.4");
}

/* Function: mdlInitializeSampleTimes =====================================
 * Abstract:
 *    This function is used to specify the sample time(s) for your
 *    S-function. You must register the same number of sample times as
 *    specified in ssSetNumSampleTimes.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
  ssSetSampleTime(S, 0, INHERITED_SAMPLE_TIME);
  ssSetOffsetTime(S, 0, FIXED_IN_MINOR_STEP_OFFSET);

#if defined(ssSetModelReferenceSampleTimeDefaultInheritance)

  ssSetModelReferenceSampleTimeDefaultInheritance(S);

#endif

}

#define MDL_SET_WORK_WIDTHS
#if defined(MDL_SET_WORK_WIDTHS) && defined(MATLAB_MEX_FILE)

/* Function: mdlSetWorkWidths =============================================
 * Abstract:
 *      The optional method, mdlSetWorkWidths is called after input port
 *      width, output port width, and sample times of the S-function have
 *      been determined to set any state and work vector sizes which are
 *      a function of the input, output, and/or sample times.
 *
 *      Run-time parameters are registered in this method using methods
 *      ssSetNumRunTimeParams, ssSetRunTimeParamInfo, and related methods.
 */
static void mdlSetWorkWidths(SimStruct *S)
{
}

#endif

#define MDL_START
#if defined(MDL_START)

/* Function: mdlStart =====================================================
 * Abstract:
 *    This function is called once at start of model execution. If you
 *    have states that should be initialized once, this is the place
 *    to do it.
 */
static void mdlStart(SimStruct *S)
{
  if (isDWorkNeeded(S)) {
    /*
     * Access bus/struct information
     */
    int32_T *__dtSizeInfo = (int32_T *) ssGetDWork(S, 0);
    int32_T *__dtBusInfo = (int32_T *) ssGetDWork(S, 1);

    /* Get common data type Id */
    DTypeId __acadoinputId = ssGetDataTypeId(S, "acadoinput");
    DTypeId __int32Id = ssGetDataTypeId(S, "int32");
    DTypeId __acadodataId = ssGetDataTypeId(S, "acadodata");
    DTypeId __doubleId = ssGetDataTypeId(S, "double");
    DTypeId __acadooutputId = ssGetDataTypeId(S, "acadooutput");

    /* Get common data type size */
    __dtSizeInfo[0] = ssGetDataTypeSize(S, __acadoinputId);
    __dtSizeInfo[1] = ssGetDataTypeSize(S, __int32Id);
    __dtSizeInfo[2] = ssGetDataTypeSize(S, __acadodataId);
    __dtSizeInfo[3] = ssGetDataTypeSize(S, __doubleId);
    __dtSizeInfo[4] = ssGetDataTypeSize(S, __acadooutputId);

    /* Get information for accessing acadoinput.control */
    __dtBusInfo[0] = ssGetBusElementOffset(S, __acadoinputId, 0);
    __dtBusInfo[1] = __dtSizeInfo[1];

    /* Get information for accessing acadoinput.shifting */
    __dtBusInfo[2] = ssGetBusElementOffset(S, __acadoinputId, 1);
    __dtBusInfo[3] = __dtSizeInfo[1];

    /* Get information for accessing acadoinput.initialization */
    __dtBusInfo[4] = ssGetBusElementOffset(S, __acadoinputId, 2);
    __dtBusInfo[5] = __dtSizeInfo[1];

    /* Get information for accessing acadoinput.data.x */
    __dtBusInfo[6] = ssGetBusElementOffset(S, __acadoinputId, 3) +
      ssGetBusElementOffset(S, __acadodataId, 0);
    __dtBusInfo[7] = 246*__dtSizeInfo[3];

    /* Get information for accessing acadoinput.data.u */
    __dtBusInfo[8] = ssGetBusElementOffset(S, __acadoinputId, 3) +
      ssGetBusElementOffset(S, __acadodataId, 1);
    __dtBusInfo[9] = 120*__dtSizeInfo[3];

    /* Get information for accessing acadoinput.data.y */
    __dtBusInfo[10] = ssGetBusElementOffset(S, __acadoinputId, 3) +
      ssGetBusElementOffset(S, __acadodataId, 2);
    __dtBusInfo[11] = 360*__dtSizeInfo[3];

    /* Get information for accessing acadoinput.data.yN */
    __dtBusInfo[12] = ssGetBusElementOffset(S, __acadoinputId, 3) +
      ssGetBusElementOffset(S, __acadodataId, 3);
    __dtBusInfo[13] = 6*__dtSizeInfo[3];

    /* Get information for accessing acadoinput.data.W */
    __dtBusInfo[14] = ssGetBusElementOffset(S, __acadoinputId, 3) +
      ssGetBusElementOffset(S, __acadodataId, 4);
    __dtBusInfo[15] = 81*__dtSizeInfo[3];

    /* Get information for accessing acadoinput.data.WN */
    __dtBusInfo[16] = ssGetBusElementOffset(S, __acadoinputId, 3) +
      ssGetBusElementOffset(S, __acadodataId, 5);
    __dtBusInfo[17] = 36*__dtSizeInfo[3];

    /* Get information for accessing acadoinput.data.x0 */
    __dtBusInfo[18] = ssGetBusElementOffset(S, __acadoinputId, 3) +
      ssGetBusElementOffset(S, __acadodataId, 6);
    __dtBusInfo[19] = 6*__dtSizeInfo[3];

    /* Get information for accessing acadooutput.status */
    __dtBusInfo[20] = ssGetBusElementOffset(S, __acadooutputId, 0);
    __dtBusInfo[21] = __dtSizeInfo[1];

    /* Get information for accessing acadooutput.kktValue */
    __dtBusInfo[22] = ssGetBusElementOffset(S, __acadooutputId, 1);
    __dtBusInfo[23] = __dtSizeInfo[3];

    /* Get information for accessing acadooutput.objValue */
    __dtBusInfo[24] = ssGetBusElementOffset(S, __acadooutputId, 2);
    __dtBusInfo[25] = __dtSizeInfo[3];

    /* Get information for accessing acadooutput.execTime */
    __dtBusInfo[26] = ssGetBusElementOffset(S, __acadooutputId, 3);
    __dtBusInfo[27] = __dtSizeInfo[3];

    /* Get information for accessing acadooutput.data.x */
    __dtBusInfo[28] = ssGetBusElementOffset(S, __acadooutputId, 4) +
      ssGetBusElementOffset(S, __acadodataId, 0);
    __dtBusInfo[29] = 246*__dtSizeInfo[3];

    /* Get information for accessing acadooutput.data.u */
    __dtBusInfo[30] = ssGetBusElementOffset(S, __acadooutputId, 4) +
      ssGetBusElementOffset(S, __acadodataId, 1);
    __dtBusInfo[31] = 120*__dtSizeInfo[3];

    /* Get information for accessing acadooutput.data.y */
    __dtBusInfo[32] = ssGetBusElementOffset(S, __acadooutputId, 4) +
      ssGetBusElementOffset(S, __acadodataId, 2);
    __dtBusInfo[33] = 360*__dtSizeInfo[3];

    /* Get information for accessing acadooutput.data.yN */
    __dtBusInfo[34] = ssGetBusElementOffset(S, __acadooutputId, 4) +
      ssGetBusElementOffset(S, __acadodataId, 3);
    __dtBusInfo[35] = 6*__dtSizeInfo[3];

    /* Get information for accessing acadooutput.data.W */
    __dtBusInfo[36] = ssGetBusElementOffset(S, __acadooutputId, 4) +
      ssGetBusElementOffset(S, __acadodataId, 4);
    __dtBusInfo[37] = 81*__dtSizeInfo[3];

    /* Get information for accessing acadooutput.data.WN */
    __dtBusInfo[38] = ssGetBusElementOffset(S, __acadooutputId, 4) +
      ssGetBusElementOffset(S, __acadodataId, 5);
    __dtBusInfo[39] = 36*__dtSizeInfo[3];

    /* Get information for accessing acadooutput.data.x0 */
    __dtBusInfo[40] = ssGetBusElementOffset(S, __acadooutputId, 4) +
      ssGetBusElementOffset(S, __acadodataId, 6);
    __dtBusInfo[41] = 6*__dtSizeInfo[3];

    /*
     * Configure the pwork 0 (__u1BUS)
     */
    {
      acadoinput* __u1BUS = (acadoinput*)calloc(sizeof(acadoinput),
        ssGetInputPortWidth(S, 0));
      if (__u1BUS==NULL) {
        ssSetErrorStatus(S,
                         "Unexpected error during the memory allocation for __u1BUS");
        return;
      }

      ssSetPWorkValue(S, 0, __u1BUS);
    }

    /*
     * Configure the pwork 1 (__y1BUS)
     */
    {
      acadooutput* __y1BUS = (acadooutput*)calloc(sizeof(acadooutput),
        ssGetOutputPortWidth(S, 0));
      if (__y1BUS==NULL) {
        ssSetErrorStatus(S,
                         "Unexpected error during the memory allocation for __y1BUS");
        return;
      }

      ssSetPWorkValue(S, 1, __y1BUS);
    }

    {
      /*
       * Call the legacy code function
       */
      acado_initialize();
    }
  }
}

#endif

/* Function: mdlOutputs ===================================================
 * Abstract:
 *    In this function, you compute the outputs of your S-function
 *    block. Generally outputs are placed in the output vector(s),
 *    ssGetOutputPortSignal.
 */
static void mdlOutputs(SimStruct *S, int_T tid)
{
  if (isDWorkNeeded(S)) {
    /*
     * Access bus/struct information
     */
    int32_T *__dtSizeInfo = (int32_T *) ssGetDWork(S, 0);
    int32_T *__dtBusInfo = (int32_T *) ssGetDWork(S, 1);

    /*
     * Get access to Parameter/Input/Output/DWork/size information
     */
    char *u1 = (char *) ssGetInputPortSignal(S, 0);
    char *y1 = (char *) ssGetOutputPortSignal(S, 0);

    /*
     * Locally declared variable(s)
     */
    acadoinput *__u1BUS = (acadoinput *) ssGetPWorkValue(S, 0);
    acadooutput *__y1BUS = (acadooutput *) ssGetPWorkValue(S, 1);

    /*
     * Assign the Simulink Structure u1 to the Legacy Structure __u1BUS
     */
    (void) memcpy(&__u1BUS[0].control
                  , u1 + __dtBusInfo[0], __dtBusInfo[1]);
    (void) memcpy(&__u1BUS[0].shifting
                  , u1 + __dtBusInfo[2], __dtBusInfo[3]);
    (void) memcpy(&__u1BUS[0].initialization
                  , u1 + __dtBusInfo[4], __dtBusInfo[5]);
    (void) memcpy(__u1BUS[0].data.x
                  , u1 + __dtBusInfo[6], __dtBusInfo[7]);
    (void) memcpy(__u1BUS[0].data.u
                  , u1 + __dtBusInfo[8], __dtBusInfo[9]);
    (void) memcpy(__u1BUS[0].data.y
                  , u1 + __dtBusInfo[10], __dtBusInfo[11]);
    (void) memcpy(__u1BUS[0].data.yN
                  , u1 + __dtBusInfo[12], __dtBusInfo[13]);
    (void) memcpy(__u1BUS[0].data.W
                  , u1 + __dtBusInfo[14], __dtBusInfo[15]);
    (void) memcpy(__u1BUS[0].data.WN
                  , u1 + __dtBusInfo[16], __dtBusInfo[17]);
    (void) memcpy(__u1BUS[0].data.x0
                  , u1 + __dtBusInfo[18], __dtBusInfo[19]);

    /*
     * Call the legacy code function
     */
    acado_step( __u1BUS, __y1BUS);

    /*
     * Assign the Legacy Structure __y1BUS to the Simulink Structure y1
     */
    (void) memcpy(y1 + __dtBusInfo[20], &__y1BUS[0].status
                  , __dtBusInfo[21]);
    (void) memcpy(y1 + __dtBusInfo[22], &__y1BUS[0].kktValue
                  , __dtBusInfo[23]);
    (void) memcpy(y1 + __dtBusInfo[24], &__y1BUS[0].objValue
                  , __dtBusInfo[25]);
    (void) memcpy(y1 + __dtBusInfo[26], &__y1BUS[0].execTime
                  , __dtBusInfo[27]);
    (void) memcpy(y1 + __dtBusInfo[28], __y1BUS[0].data.x
                  , __dtBusInfo[29]);
    (void) memcpy(y1 + __dtBusInfo[30], __y1BUS[0].data.u
                  , __dtBusInfo[31]);
    (void) memcpy(y1 + __dtBusInfo[32], __y1BUS[0].data.y
                  , __dtBusInfo[33]);
    (void) memcpy(y1 + __dtBusInfo[34], __y1BUS[0].data.yN
                  , __dtBusInfo[35]);
    (void) memcpy(y1 + __dtBusInfo[36], __y1BUS[0].data.W
                  , __dtBusInfo[37]);
    (void) memcpy(y1 + __dtBusInfo[38], __y1BUS[0].data.WN
                  , __dtBusInfo[39]);
    (void) memcpy(y1 + __dtBusInfo[40], __y1BUS[0].data.x0
                  , __dtBusInfo[41]);
  }
}

/* Function: mdlTerminate =================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.
 */
static void mdlTerminate(SimStruct *S)
{
  if (isDWorkNeeded(S)) {
    {
      /*
       * Access bus/struct information
       */
      int32_T *__dtSizeInfo = (int32_T *) ssGetDWork(S, 0);
      int32_T *__dtBusInfo = (int32_T *) ssGetDWork(S, 1);

      /*
       * Call the legacy code function
       */
      acado_cleanup();
    }

    /*
     * Free memory for the pwork 0 (__u1BUS)
     */
    {
      acadoinput* __u1BUS = (acadoinput*)ssGetPWorkValue(S, 0);
      if (__u1BUS!=NULL) {
        free(__u1BUS);
        ssSetPWorkValue(S, 0, NULL);
      }
    }

    /*
     * Free memory for the pwork 1 (__y1BUS)
     */
    {
      acadooutput* __y1BUS = (acadooutput*)ssGetPWorkValue(S, 1);
      if (__y1BUS!=NULL) {
        free(__y1BUS);
        ssSetPWorkValue(S, 1, NULL);
      }
    }
  }
}

/* Function: CheckDataTypes =============================================
 * Abstract:
 *    CheckDataTypes verifies data types consistency between the data type
 *    definition used when this S-Function was generated and the data type
 *    used when calling the S-Function.
 */
static void CheckDataTypes(SimStruct *S)
{
  /*
   * Access data type information
   */
  slDataTypeAccess *dta = ssGetDataTypeAccess(S);
  const char *bpath = ssGetPath(S);
  DTypeId __acadoinputId = ssGetDataTypeId(S, "acadoinput");
  DTypeId __int32Id = ssGetDataTypeId(S, "int32");
  DTypeId __acadodataId = ssGetDataTypeId(S, "acadodata");
  DTypeId __doubleId = ssGetDataTypeId(S, "double");
  DTypeId __acadooutputId = ssGetDataTypeId(S, "acadooutput");

  /* Verify Bus/StructType 'acadoinput', specification */
  if (ssGetNumBusElements(S, __acadoinputId)!=4) {
    ssSetErrorStatus(S, "The Bus/StructType 'acadoinput' must have 4 elements.");
    return;
  }

  {
    int_T dimIdx, width, *dims;

    /* Verify Bus/Struct element 'acadoinput.control' */
    if (strcmp((char *) ssGetBusElementName(S, __acadoinputId, 0), "control")!=0)
    {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadoinput' must have the element 'control' in position 1.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.control' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadoinputId, 0)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "int32"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.control' must have the same data type storage Id as an 'int32' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.control' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadoinputId, 0);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadoinputId, 0);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.control' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.control' complexity */
    if (ssGetBusElementComplexSignal(S, __acadoinputId, 0)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.control' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.shifting' */
    if (strcmp((char *) ssGetBusElementName(S, __acadoinputId, 1), "shifting")!=
        0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadoinput' must have the element 'shifting' in position 2.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.shifting' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadoinputId, 1)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "int32"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.shifting' must have the same data type storage Id as an 'int32' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.shifting' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadoinputId, 1);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadoinputId, 1);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.shifting' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.shifting' complexity */
    if (ssGetBusElementComplexSignal(S, __acadoinputId, 1)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.shifting' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.initialization' */
    if (strcmp((char *) ssGetBusElementName(S, __acadoinputId, 2),
               "initialization")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadoinput' must have the element 'initialization' in position 3.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.initialization' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadoinputId, 2)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "int32"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.initialization' must have the same data type storage Id as an 'int32' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.initialization' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadoinputId, 2);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadoinputId, 2);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.initialization' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.initialization' complexity */
    if (ssGetBusElementComplexSignal(S, __acadoinputId, 2)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.initialization' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.data' */
    if (strcmp((char *) ssGetBusElementName(S, __acadoinputId, 3), "data")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadoinput' must have the element 'data' in position 4.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.data' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadoinputId, 3)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "acadodata"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.data' must have the same data type storage Id as an 'acadodata' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.data' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadoinputId, 3);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadoinputId, 3);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.data' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadoinput.data' complexity */
    if (ssGetBusElementComplexSignal(S, __acadoinputId, 3)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadoinput.data' must be real.");
      return;
    }
  }

  /* Verify Bus/StructType 'acadodata', specification */
  if (ssGetNumBusElements(S, __acadodataId)!=7) {
    ssSetErrorStatus(S, "The Bus/StructType 'acadodata' must have 7 elements.");
    return;
  }

  {
    int_T dimIdx, width, *dims;

    /* Verify Bus/Struct element 'acadodata.x' */
    if (strcmp((char *) ssGetBusElementName(S, __acadodataId, 0), "x")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadodata' must have the element 'x' in position 1.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.x' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadodataId, 0)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.x' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.x' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadodataId, 0);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadodataId, 0);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=246) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.x' must have 246 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.x' complexity */
    if (ssGetBusElementComplexSignal(S, __acadodataId, 0)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.x' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.u' */
    if (strcmp((char *) ssGetBusElementName(S, __acadodataId, 1), "u")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadodata' must have the element 'u' in position 2.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.u' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadodataId, 1)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.u' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.u' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadodataId, 1);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadodataId, 1);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=120) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.u' must have 120 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.u' complexity */
    if (ssGetBusElementComplexSignal(S, __acadodataId, 1)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.u' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.y' */
    if (strcmp((char *) ssGetBusElementName(S, __acadodataId, 2), "y")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadodata' must have the element 'y' in position 3.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.y' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadodataId, 2)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.y' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.y' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadodataId, 2);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadodataId, 2);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=360) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.y' must have 360 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.y' complexity */
    if (ssGetBusElementComplexSignal(S, __acadodataId, 2)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.y' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.yN' */
    if (strcmp((char *) ssGetBusElementName(S, __acadodataId, 3), "yN")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadodata' must have the element 'yN' in position 4.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.yN' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadodataId, 3)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.yN' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.yN' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadodataId, 3);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadodataId, 3);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=6) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.yN' must have 6 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.yN' complexity */
    if (ssGetBusElementComplexSignal(S, __acadodataId, 3)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.yN' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.W' */
    if (strcmp((char *) ssGetBusElementName(S, __acadodataId, 4), "W")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadodata' must have the element 'W' in position 5.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.W' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadodataId, 4)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.W' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.W' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadodataId, 4);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadodataId, 4);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=81) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.W' must have 81 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.W' complexity */
    if (ssGetBusElementComplexSignal(S, __acadodataId, 4)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.W' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.WN' */
    if (strcmp((char *) ssGetBusElementName(S, __acadodataId, 5), "WN")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadodata' must have the element 'WN' in position 6.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.WN' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadodataId, 5)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.WN' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.WN' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadodataId, 5);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadodataId, 5);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=36) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.WN' must have 36 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.WN' complexity */
    if (ssGetBusElementComplexSignal(S, __acadodataId, 5)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.WN' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.x0' */
    if (strcmp((char *) ssGetBusElementName(S, __acadodataId, 6), "x0")!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadodata' must have the element 'x0' in position 7.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.x0' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadodataId, 6)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.x0' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.x0' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadodataId, 6);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadodataId, 6);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=6) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.x0' must have 6 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadodata.x0' complexity */
    if (ssGetBusElementComplexSignal(S, __acadodataId, 6)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadodata.x0' must be real.");
      return;
    }
  }

  /* Verify Bus/StructType 'acadooutput', specification */
  if (ssGetNumBusElements(S, __acadooutputId)!=5) {
    ssSetErrorStatus(S, "The Bus/StructType 'acadooutput' must have 5 elements.");
    return;
  }

  {
    int_T dimIdx, width, *dims;

    /* Verify Bus/Struct element 'acadooutput.status' */
    if (strcmp((char *) ssGetBusElementName(S, __acadooutputId, 0), "status")!=0)
    {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadooutput' must have the element 'status' in position 1.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.status' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadooutputId, 0)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "int32"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.status' must have the same data type storage Id as an 'int32' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.status' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadooutputId, 0);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadooutputId, 0);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.status' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.status' complexity */
    if (ssGetBusElementComplexSignal(S, __acadooutputId, 0)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.status' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.kktValue' */
    if (strcmp((char *) ssGetBusElementName(S, __acadooutputId, 1), "kktValue")
        !=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadooutput' must have the element 'kktValue' in position 2.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.kktValue' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadooutputId, 1)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.kktValue' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.kktValue' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadooutputId, 1);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadooutputId, 1);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.kktValue' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.kktValue' complexity */
    if (ssGetBusElementComplexSignal(S, __acadooutputId, 1)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.kktValue' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.objValue' */
    if (strcmp((char *) ssGetBusElementName(S, __acadooutputId, 2), "objValue")
        !=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadooutput' must have the element 'objValue' in position 3.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.objValue' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadooutputId, 2)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.objValue' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.objValue' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadooutputId, 2);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadooutputId, 2);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.objValue' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.objValue' complexity */
    if (ssGetBusElementComplexSignal(S, __acadooutputId, 2)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.objValue' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.execTime' */
    if (strcmp((char *) ssGetBusElementName(S, __acadooutputId, 3), "execTime")
        !=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadooutput' must have the element 'execTime' in position 4.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.execTime' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadooutputId, 3)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "double"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.execTime' must have the same data type storage Id as an 'double' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.execTime' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadooutputId, 3);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadooutputId, 3);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.execTime' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.execTime' complexity */
    if (ssGetBusElementComplexSignal(S, __acadooutputId, 3)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.execTime' must be real.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.data' */
    if (strcmp((char *) ssGetBusElementName(S, __acadooutputId, 4), "data")!=0)
    {
      ssSetErrorStatus(S,
                       "The Bus/StructType 'acadooutput' must have the element 'data' in position 5.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.data' data type */
    if (dtaGetDataTypeStorageId(dta, bpath, ssGetBusElementDataType(S,
          __acadooutputId, 4)) != dtaGetDataTypeStorageId(dta, bpath,
         dtaGetDataTypeId(dta, "acadodata"))) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.data' must have the same data type storage Id as an 'acadodata' has.");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.data' width */
    width = 1;
    dims = (int_T *) ssGetBusElementDimensions(S, __acadooutputId, 4);
    for (dimIdx = 0; dimIdx < ssGetBusElementNumDimensions(S, __acadooutputId, 4);
         dimIdx++) {
      width *= dims[dimIdx];
    }

    if (width!=1) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.data' must have 1 element(s).");
      return;
    }

    /* Verify Bus/Struct element 'acadooutput.data' complexity */
    if (ssGetBusElementComplexSignal(S, __acadooutputId, 4)!=0) {
      ssSetErrorStatus(S,
                       "The Bus/StructType element 'acadooutput.data' must be real.");
      return;
    }
  }
}

/* Function: GetRTWEnvironmentMode ======================================
 * Abstract:
 *    Must be called when ssRTWGenIsCodeGen(S)==true. This function
 *    returns the code generation mode:
 *      -1 if an error occurred
 *       0 for standalone code generation target
 *       1 for simulation target (Accelerator, RTW-SFcn,...)
 */
static int_T GetRTWEnvironmentMode(SimStruct *S)
{
  int_T status;
  mxArray *plhs[1];
  mxArray *prhs[1];
  int_T err;

  /*
   * Get the name of the Simulink block diagram
   */
  prhs[0] = mxCreateString(ssGetModelName(ssGetRootSS(S)));
  plhs[0] = NULL;

  /*
   * Call "isSimulationTarget = rtwenvironmentmode(modelName)" in MATLAB
   */
  mexSetTrapFlag(1);
  err = mexCallMATLAB(1, plhs, 1, prhs, "rtwenvironmentmode");
  mexSetTrapFlag(0);
  mxDestroyArray(prhs[0]);

  /*
   * Set the error status if an error occurred
   */
  if (err) {
    if (plhs[0]) {
      mxDestroyArray(plhs[0]);
      plhs[0] = NULL;
    }

    ssSetErrorStatus(S, "Unknown error during call to 'rtwenvironmentmode'.");
    return -1;
  }

  /*
   * Get the value returned by rtwenvironmentmode(modelName)
   */
  if (plhs[0]) {
    status = (int_T) (mxGetScalar(plhs[0]) != 0);
    mxDestroyArray(plhs[0]);
    plhs[0] = NULL;
  }

  return (status);
}

/*
 * Required S-function trailer
 */
#ifdef MATLAB_MEX_FILE
# include "simulink.c"
#else
# include "cg_sfun.h"
#endif
