%% File : acado_solver_sfun.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for acado_solver_sfun
%%
%% Simulink version      : 8.4 (R2014b) 08-Sep-2014
%% TLC file generated on : 05-Aug-2015 16:13:27

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'acado_solver_sfun';
     def.OutputFcnSpec = 'acado_step(acadoinput u1[1], acadooutput y1[1])';
     def.StartFcnSpec = 'acado_initialize( void )';
     def.TerminateFcnSpec = 'acado_cleanup( void )';
     def.HeaderFiles = {'acado_common.h', 'acado_solver_sfunction.h'};
     def.SourceFiles = {'acado_solver.c', 'acado_integrator.c', 'acado_auxiliary_functions.c', 'acado_solver_sfunction.c', 'acado_qpoases_interface.cpp', 'qpoases/SRC/QProblem.cpp', 'qpoases/SRC/QProblemB.cpp', 'qpoases/SRC/Bounds.cpp', 'qpoases/SRC/Constraints.cpp', 'qpoases/SRC/SubjectTo.cpp', 'qpoases/SRC/Indexlist.cpp', 'qpoases/SRC/CyclingManager.cpp', 'qpoases/SRC/Utils.cpp', 'qpoases/SRC/MessageHandling.cpp', 'qpoases/SRC/EXTRAS/SolutionAnalysis.cpp'};
     def.IncPaths = {'qpoases', 'qpoases/INCLUDE', 'qpoases/SRC'};
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements acado_solver_sfun "C"

%% Function: FcnGenerateUniqueFileName ====================================
%%
%function FcnGenerateUniqueFileName(filename, type) void
  %%
  %assign isReserved = TLC_FALSE
  %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
    %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
    %if (thisFile.Name==filename) && (thisFile.Type==type)
      %assign isReserved = TLC_TRUE
      %break
    %endif
  %endforeach
  %if (isReserved==TLC_TRUE)
    %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
  %endif
  %return filename
  %%
%endfunction

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C++
  %if ::GenCPP==0 && !IsModelReferenceSimTarget()
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
  %endif

  %assign ver = FEVAL("ver", "simulink")
  %assign factor = 1.0
  %assign slVer = 0.0
  %foreach idx = SIZE(ver.Version)[1]
    %if ISEQUAL(ver.Version[idx], ".")
      %assign factor = factor/10.0
    %else
      %assign slVer = slVer + %<ver.Version[idx]>*factor
    %endif
  %endforeach

  %if GenerateErtSFunction==1 && slVer < 6.21
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
  %endif

  %if ExtMode==1 && slVer < 6.3
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
  %endif

  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel

    %if slVer < 6.21
      %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
    %endif

    %assign hFileName = FcnGenerateUniqueFileName("acado_solver_sfun_wrapper", "header")
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"

    extern int acado_solver_sfun_wrapper_allocmem(void** __u1BUS, int_T __u1Width, void** __y1BUS, int_T __y1Width);
    extern int acado_solver_sfun_wrapper_freemem(void** __u1BUS, void** __y1BUS);

    extern void acado_solver_sfun_wrapper_start(void);

    extern void acado_solver_sfun_wrapper_output( const void *u1, void *__u1BUS,  void *y1, void *__y1BUS);

    extern void acado_solver_sfun_wrapper_terminate(void);

    #endif
    %closefile hFile

    %assign cFileName = FcnGenerateUniqueFileName("acado_solver_sfun_wrapper", "source")
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <stdlib.h>
    #include <string.h>
    #include "tmwtypes.h"
    #include "acado_common.h"
    #include "acado_solver_sfunction.h"

    %if IsModelReferenceSimTarget()
    extern "C" {
    %endif
    int acado_solver_sfun_wrapper_allocmem(void** __u1BUS, int_T __u1Width, void** __y1BUS, int_T __y1Width) {
      *__u1BUS = calloc(sizeof(acadoinput), __u1Width);
      if (*__u1BUS==NULL) return -1;

      *__y1BUS = calloc(sizeof(acadooutput), __y1Width);
      if (*__y1BUS==NULL) return -1;

      return 0;
    }

    int acado_solver_sfun_wrapper_freemem(void** __u1BUS, void** __y1BUS) {
      if (*__u1BUS!=NULL) free(*__u1BUS);
      *__u1BUS = NULL;

      if (*__y1BUS!=NULL) free(*__y1BUS);
      *__y1BUS = NULL;

      return 0;
    }

    %if IsModelReferenceSimTarget()
    }
    %endif
    %if IsModelReferenceSimTarget()
    extern "C" {
    %endif
    void acado_solver_sfun_wrapper_start(void) {


      acado_initialize();

    }
    %if IsModelReferenceSimTarget()
    }
    %endif

    %if IsModelReferenceSimTarget()
    extern "C" {
    %endif
    void acado_solver_sfun_wrapper_output( const void *u1, void *__u1BUS,  void *y1, void *__y1BUS) {

      /*
       * Assign the Simulink Structure u1 to Legacy Structure __u1BUS
       */
      %assign dTypeId = LibBlockInputSignalDataTypeId(0)
      %<SLibAssignSLStructToUserStruct(dTypeId, "(*(acadoinput *)__u1BUS)", "(char *)u1", 0)>


      acado_step( (acadoinput *) __u1BUS, (acadooutput *) __y1BUS);

      /*
       * Assign the Legacy Structure __y1BUS to the Simulink Structure y1
       */
      %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
      %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(acadooutput *)__y1BUS)", 0)>

    }
    %if IsModelReferenceSimTarget()
    }
    %endif

    %if IsModelReferenceSimTarget()
    extern "C" {
    %endif
    void acado_solver_sfun_wrapper_terminate(void) {


      acado_cleanup();

    }
    %if IsModelReferenceSimTarget()
    }
    %endif

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %if IsModelReferenceSimTarget()
        %<SLibAddToStaticSources("%<cFileName>.cpp")>
    %else
        %<LibAddToModelSources("%<cFileName>")>
    %endif

  %else

    %<LibAddToCommonIncludes("acado_common.h")>
    %<LibAddToCommonIncludes("acado_solver_sfunction.h")>

  %endif

    %<SLibAddToStaticSources("acado_solver.c")>
    %<SLibAddToStaticSources("acado_integrator.c")>
    %<SLibAddToStaticSources("acado_auxiliary_functions.c")>
    %<SLibAddToStaticSources("acado_solver_sfunction.c")>
    %<SLibAddToStaticSources("acado_qpoases_interface.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/QProblem.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/QProblemB.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/Bounds.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/Constraints.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/SubjectTo.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/Indexlist.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/CyclingManager.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/Utils.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/MessageHandling.cpp")>
    %<SLibAddToStaticSources("qpoases/SRC/EXTRAS/SolutionAnalysis.cpp")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
  %else
    %<LibBlockSetIsExpressionCompliant(block)>
  %endif
  %%
%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign u1BUS_pAddr = "&" + LibBlockPWork("", "", "", 0)
    %assign y1BUS_pAddr = "&" + LibBlockPWork("", "", "", 1)
    if (acado_solver_sfun_wrapper_allocmem(%<u1BUS_pAddr>, %<LibBlockInputSignalWidth(0)>, %<y1BUS_pAddr>, %<LibBlockOutputSignalWidth(0)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<LibGetBlockPath(block)>\"")>;

    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    acado_solver_sfun_wrapper_start();
  %else 
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    acado_initialize();
  %endif 
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u1BUS_ptr = LibBlockPWork("", "", "", 0)
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y1BUS_ptr = LibBlockPWork("", "", "", 1)
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    acado_solver_sfun_wrapper_output( %<u1_ptr>, %<u1BUS_ptr>, %<y1_ptr>, %<y1BUS_ptr>);
  %else 
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %%
    acado_step( (acadoinput*)%<u1_ptr>, %<y1_ptr>);
  %endif 
  %%
%endfunction

%% Function: Terminate ====================================================
%%
%function Terminate(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %%
    /* %<Type>(%<ParamSettings.FunctionName>): %<Name> */
    acado_solver_sfun_wrapper_terminate();
    %assign u1BUS_pAddr = "&" + LibBlockPWork("", "", "", 0)
    %assign y1BUS_pAddr = "&" + LibBlockPWork("", "", "", 1)
    if (acado_solver_sfun_wrapper_freemem(%<u1BUS_pAddr>, %<y1BUS_pAddr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<LibGetBlockPath(block)>\"")>;

  %else 
   %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
   acado_cleanup();
  %endif 
  %%
%endfunction

%% [EOF]
